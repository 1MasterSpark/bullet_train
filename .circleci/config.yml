version: 2.1
orbs:
  ruby: circleci/ruby@0.1.2

jobs:
  'Standard Ruby':
    docker:
      - image: circleci/ruby:3.0.2-node-browsers
    steps:
      - checkout

      # Restore dependency caches
      - restore_cache:
          name: Restore Bundler cache
          keys:
            - gem-cache-v1-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-v1-{{ .Branch }}-
            - gem-cache-v1-
      - restore_cache:
          name: Restore Yarn cache
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-

      # Install dependencies
      - ruby/bundle-install
      - run: bundle clean --force
      - run: yarn install

      # Save dependency caches
      # We only do this as part of this job, because it's time consuming and we don't want it to slow down test runners.
      - save_cache:
          name: Save gem cache
          key: gem-cache-v1-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - save_cache:
          name: Save yarn cache
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

      - run:
          name: Check Standard Ruby
          command: bundle exec standardrb

  'Minitest':
    docker:
      - image: circleci/ruby:3.0.2-node-browsers
        environment:
          PGHOST: localhost
          PGUSER: bullet_train
          RAILS_ENV: test
      - image: circleci/postgres
        environment:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: bullet_train_test
          POSTGRES_USER: bullet_train
    executor: ruby/default
    parallelism: 16
    steps:
      - checkout
      - restore_cache:
          name: Restore Bundler cache
          keys:
            - gem-cache-v1-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-v1-{{ .Branch }}-
            - gem-cache-v1-
      - restore_cache:
          name: Restore Yarn cache
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-

      # Install dependencies
      - ruby/bundle-install
      - run: bundle clean --force
      - run: yarn install

      # We run this because the DB might not be available
      # for a while due to a race condition
      - run: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Run tests with Knapsack Pro
          command: |
            export RAILS_ENV=test
            bundle exec rails "knapsack_pro:queue:minitest[--verbose]"
          environment:
            KNAPSACK_PRO_CI_NODE_TOTAL: 16

      # If you don't want to use Knapsack Pro, then use this configuration:
      #
      # - run:
      #     name: Run unit tests
      #     command: bundle exec rails test
      # - run:
      #     name: Run system tests
      #     command: bundle exec rails test:system
      #
      # If you want to gather test results in CircleCI when not running tests in parallel,
      # include `minitest-ci` in your Gemfile and uncomment the following step.
      # You can access the test results via the "Tests" tab within each build in CircleCI.
      #
      # - store_test_results:
      #     path: test/reports

  'Minitest for Super Scaffolding':
    docker:
      - image: circleci/ruby:3.0.2-node-browsers
        environment:
          PGHOST: localhost
          PGUSER: bullet_train
          RAILS_ENV: test
      - image: circleci/postgres
        environment:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: bullet_train_test
          POSTGRES_USER: bullet_train
      - image: circleci/redis
    executor: ruby/default
    steps:
      - checkout

      # Restore dependency caches
      - restore_cache:
          name: Restore Bundler cache
          keys:
            - gem-cache-v1-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-v1-{{ .Branch }}-
            - gem-cache-v1-
      - restore_cache:
          name: Restore Yarn cache
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-

      # Install dependencies
      - ruby/bundle-install
      - run: bundle clean --force
      - run: yarn install

      # We run this because the DB might not be available
      # for a while due to a race condition
      - run: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: 'Setup Super Scaffolding System Test'
          command: bundle exec test/bin/setup-super-scaffolding-system-test
      - run:
          name: 'Run Super Scaffolding Test'
          command: bundle exec rails test test/system/super_scaffolding_test.rb

workflows:
  version: 2
  build:
    jobs:
      - 'Standard Ruby'
      - 'Minitest'
      - 'Minitest for Super Scaffolding'
